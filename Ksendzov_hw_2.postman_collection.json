{
	"info": {
		"_postman_id": "0ebb646d-c129-467b-b932-16f690b3b7c6",
		"name": "Ksendzov_hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25537879"
	},
	"item": [
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test('Status code is 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// console.log(jsonData);\r",
							"\r",
							"// 7. Спарсить request\r",
							"\r",
							"let jsonRequest = request.data;\r",
							"\r",
							"// console.log(jsonRequest);\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test('json response имеет параметр start_qa_salary', ()=>{\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_6_months', function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_12_months', ()=>{\r",
							"    pm.expect(jsonData).to.have.any.property('qa_salary_after_12_months')\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_1.5_year', function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_3.5_years', ()=>{\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test('json response имеет параметр person',()=>{\r",
							"    pm.expect(jsonData).to.have.property('person')\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('параметр start_qa_salary равен salary из request', function(){\r",
							"    pm.expect(jsonData.start_qa_salary == request.data.salary).to.be.true\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('параметр qa_salary_after_6_months равен salary*2 из request',()=>{\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(request.data.salary*2)\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('параметр qa_salary_after_12_months равен salary*2.7 из request', function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months === request.data.salary*2.7).to.be.true\r",
							"});\r",
							"\r",
							"// console.log(`jsonData.qa_salary_after_12_months = ${jsonData.qa_salary_after_12_months}`);\r",
							"// console.log(`request.data.salary*2.7 = ${request.data.salary*2.7}`);\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('параметр qa_salary_after_1.5_year равен salary*3.3 из request',()=>{\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(request.data.salary*3.3)\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('параметр qa_salary_after_3.5_years равен salary*3.8 из request', function(){\r",
							"    pm.expect(pm.response.json()['qa_salary_after_3.5_years'] === request.data.salary*3.8).to.be.ok\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('в параметре person, 1-й элемент из u_name равен salary из request',()=>{\r",
							"    pm.expect(String(jsonData['person']['u_name'][1])).to.eql(request.data['salary'])\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test('параметр u_age равен age из request', function(){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+request.data.age)\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('параметр u_salary_5_years равен salary*4.2 из request',()=>{\r",
							"    pm.expect(pm.response.json().person.u_salary_5_years === request.data.salary*4.2).to.be.true\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"\r",
							"let person = pm.response.json().person;\r",
							"for(let key in person) {\r",
							"    if (Array.isArray(person[key])) {\r",
							"        (person[key]).forEach(value => console.log(value));\r",
							"    } else {\r",
							"        console.log(`${key}: ${person[key]}`);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{baseURL}} /user_info_2",
					"protocol": "http",
					"host": [
						"{{baseURL}} "
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json",
							"",
							"let jsonData = pm.response.json();",
							"",
							"// console.log(jsonData);",
							"",
							"// 4. Спарсить request.",
							"",
							"let jsonRequest = pm.request.url.query.toObject();",
							"",
							"// console.log(jsonRequest);",
							"",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)",
							"",
							"pm.test('name в ответе равно name в request', ()=>{",
							"    pm.expect(pm.response.json().name).to.eql(pm.request.url.query.get('name'));",
							"});",
							"",
							"// console.log(`response: ${pm.response.json().name}`);",
							"// console.log(`request: ${pm.request.url.query.get('name')}`);",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test('age в ответе равно age из request', function(){",
							"    pm.expect(pm.response.json().age).to.eql(+pm.request.url.query.toObject().age);",
							"});",
							"",
							"pm.test('age в ответе равно age из request', ()=>{",
							"    pm.expect((pm.response.json().age) == (pm.request.url.query.get('age'))).to.be.true;",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"",
							"console.log(`request salary: ${pm.request.url.query.get('salary')} ${typeof(pm.request.url.query.get('salary'))}`);",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"",
							"console.log(`response salary: ${pm.response.json()['salary']}`);",
							"console.log(pm.response.json().salary);",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response",
							"",
							"console.log(`0-й элемент параметра salary из response: ${pm.response.json()['salary'][0]}`);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary из response",
							"console.log(`1-й элемент параметра salary из response: ${pm.response.json().salary[1]}`);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary из response",
							"",
							"console.log(`2-й элемент параметра salary из response: ${pm.response.json().salary[2]}`);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test('0-й элемент параметра salary из response равен salary из request', function(){",
							"    pm.expect(pm.response.json()['salary'][0]).to.eql(+pm.request.url.query.toObject().salary);",
							"});",
							"",
							"// console.log(`0-й элемент параметра salary из response: ${pm.response.json().salary[0]} ${typeof(pm.response.json().salary[0])}`);",
							"// console.log(`salary из request: ${pm.request.url.query.get('salary')} ${typeof(pm.request.url.query.get('salary'))}`);",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test('1-й элемент параметра salary из response равен salary*2 из request', ()=>{",
							"    pm.expect((pm.response.json().salary[1]) == (pm.request.url.query.get('salary')*2)).to.be.true;",
							"});",
							"",
							"// console.log(`1-й элемент параметра salary из response: ${pm.response.json().salary[1]} ${typeof(pm.response.json().salary[1])}`);",
							"// console.log(`salary из request: ${pm.request.url.query.get('salary')} ${typeof(pm.request.url.query.get('salary'))}`);",
							"// console.log(`salary из request: ${pm.request.url.query.get('salary')} ${typeof(pm.request.url.query.get('salary')*2)}`);",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary из response равен salary*3 из request (salary забрать из request)",
							"",
							"pm.test('2-й элемент параметра salary из response равен salary*3 из request', function(){",
							"    pm.expect((pm.response.json()['salary'][2]) == (pm.request.url.query.toObject().salary)*3).to.be.ok;",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"",
							"pm.environment.set('name');",
							"",
							"// 16. Создать в окружении переменную age",
							"",
							"pm.environment.set('age');",
							"",
							"// 17. Создать в окружении переменную salary",
							"",
							"pm.environment.set('salary');",
							"",
							"// 18. Передать в окружение переменную name",
							"",
							"pm.environment.set('name', pm.response.json().name);",
							"",
							"// 19. Передать в окружение переменную age",
							"",
							"pm.environment.set('age', pm.response.json().age);",
							"",
							"// 20. Передать в окружение переменную salary",
							"",
							"pm.environment.set('salary', pm.request.url.query.get('salary'));",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"",
							"for(var i=0; i<jsonData.salary.length;i++){",
							"    console.log(`элемент salary[${i}]: ${jsonData.salary[i]}`);",
							"}",
							"",
							"// for(var InCount in jsonData.salary){",
							"//     console.log(`элемент salary[${InCount}]: ${jsonData.salary[InCount]}`); //выводит ключи",
							"// }",
							"// for in не следует использовать для array, где важен порядок индексов. Нет гарантии, что for...in будет возвращать индексы в конкретном порядке: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/for...in",
							"",
							"let ofCount = 0;",
							"for(var element of jsonData.salary){",
							"    console.log(`элемент salary[${ofCount}]: ${element}`);",
							"    ofCount++;",
							"}",
							"",
							"let forEachCount = 0;",
							"jsonData.salary.forEach((element) => {",
							"    console.log(`элемент salary[${forEachCount}]: ${element}`);",
							"    forEachCount++;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}} /object_info_4?name=Yarik&age=7&salary=1000",
					"protocol": "http",
					"host": [
						"{{baseURL}} "
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yarik"
						},
						{
							"key": "age",
							"value": "7"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test('Status code is 200', function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// console.log(jsonData);\r",
							"\r",
							"// 4. Спарсить request\r",
							"\r",
							"let requestURL = pm.request.url.query.toObject();\r",
							"\r",
							"// console.log(requestURL);\r",
							"// console.log(pm.request.url.query);\r",
							"// console.log(pm.request.url.query[0]);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"\r",
							"pm.test('name в ответе равно name в request', function(){\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.request.url.query.toObject().name);\r",
							"});\r",
							"\r",
							"// console.log(pm.response.json().name);\r",
							"// console.log(pm.request.url.query.toObject().name);\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"\r",
							"pm.test('age в ответе равно age в request', ()=>{\r",
							"    pm.expect(pm.response.json()['age']).to.eql(pm.request.url.query.get('age'));\r",
							"});\r",
							"\r",
							"// console.log(pm.response.json()['age'], typeof(pm.response.json()['age']));\r",
							"// console.log(pm.request.url.query.get('age'), typeof(pm.request.url.query.get('age')));\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"\r",
							"pm.test('salary в ответе равно salary в request', function(){\r",
							"    pm.expect(pm.response.json().salary == pm.request.url.query.toObject().salary).to.be.true;\r",
							"});\r",
							"\r",
							"// console.log(pm.request.url.query.toObject().salary, typeof(pm.request.url.query.toObject().salary));\r",
							"// console.log(pm.response.json().salary, typeof(pm.response.json().salary) );\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(pm.response.json()['family']);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test('у параметра dog есть параметры name', ()=>{\r",
							"    pm.expect(pm.response.json().family.pets.dog).to.have.property('name');\r",
							"    pm.expect(pm.response.json().family.pets.dog.name).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test('у параметра dog есть параметры age', function(){\r",
							"    pm.expect(pm.response.json().family.pets.dog).to.have.any.keys('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky\r",
							"\r",
							"pm.test('параметр name имеет значение Luky', function(){\r",
							"    pm.expect(pm.response.json().family.pets.dog).to.have.property('name', 'Luky');\r",
							"});\r",
							"\r",
							"pm.test('параметр name имеет значение Luky', ()=>{\r",
							"    pm.expect(pm.response.json().family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"pm.test('параметр name имеет значение Luky', function(){\r",
							"    pm.expect(pm.response.json().family.pets.dog.name === 'Luky').to.be.true;\r",
							"});\r",
							"\r",
							"const assert = require('assert');   //импорт библиотеки Node.js \r",
							"pm.test('параметр name имеет значение Luky', ()=>{\r",
							"    assert.equal(pm.response.json().family.pets.dog.name, 'Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test('параметр age имеет значение 4', function(){\r",
							"    pm.expect(pm.response.json()['family']['pets']['dog']['age']).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}} /object_info_3?name=Yarik&age=7&salary=1000",
					"protocol": "http",
					"host": [
						"{{baseURL}} "
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yarik"
						},
						{
							"key": "age",
							"value": "7"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test('Статус код 200', function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Successful POST request', ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// console.log(jsonData);\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками)\r",
							"\r",
							"pm.test('name в ответе равно name в request', ()=> {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql('Yarik');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"\r",
							"pm.test('age в ответе равно age в request', function() {\r",
							"    pm.expect(+jsonData.age).to.eql(7);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"\r",
							"pm.test('salary в ответе равно salary в request', ()=>{\r",
							"    pm.expect(jsonData.salary).to.deep.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request\r",
							"\r",
							"let requestData = request.data;\r",
							"\r",
							"// console.log(requestData);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"\r",
							"pm.test('name в ответе равно name в request', function(){\r",
							"    pm.expect(pm.response.json().name).to.equal(request.data.name);\r",
							"});\r",
							"\r",
							"// console.log(`response.name: ${pm.response.json().name} ${typeof(pm.response.json().name)}`);\r",
							"// console.log(`request.name: ${request.data.name} ${typeof(request.data.name)}`);\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"\r",
							"pm.test('age в ответе равно age в request', ()=>{\r",
							"    pm.expect(pm.response.json().age === request.data.age).to.be.ok;\r",
							"});\r",
							"\r",
							"// console.log(`response.age: ${pm.response.json().age} ${typeof(pm.response.json().age)}`);\r",
							"// console.log(`request.age: ${request.data.age} ${typeof(request.data.age)}`);\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"\r",
							"pm.test('salary в ответе равно salary в request', ()=>{\r",
							"    pm.expect(pm.response.json().salary == request.data.salary).to.be.true;\r",
							"});\r",
							"\r",
							"// другие варианты с явным приведением типов\r",
							"\r",
							"// pm.test('salary в ответе равно salary в request', ()=>{\r",
							"//     pm.expect(String(pm.response.json().salary)).to.eql(request.data.salary);\r",
							"// });\r",
							"\r",
							"// pm.test('salary в ответе равно salary в request', ()=>{\r",
							"//     pm.expect(pm.response.json().salary).to.eql(Number(request.data.salary));\r",
							"// });\r",
							"\r",
							"// console.log(`request.salary: ${request.data.salary} ${typeof(request.data.salary)}`);\r",
							"// console.log(`response.salary: ${pm.response.json().salary} ${typeof(pm.response.json().salary)}`)\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(pm.response.json()['family']);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test('u_salary_1_5_year в ответе равно salary*4', function(){\r",
							"    pm.expect(pm.response.json()['family']['u_salary_1_5_year']).to.eql(request.data.salary*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yarik",
							"type": "text"
						},
						{
							"key": "age",
							"value": "7",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{baseURL}} /user_info_3",
					"protocol": "http",
					"host": [
						"{{baseURL}} "
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test('Статус код 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string\r",
							"pm.test('В body приходит правильный string', function () {\r",
							"    pm.response.to.have.body('This is the first responce from server!ss');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}} /first",
					"protocol": "http",
					"host": [
						"{{baseURL}} "
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}