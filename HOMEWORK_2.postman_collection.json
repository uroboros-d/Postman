{
	"info": {
		"_postman_id": "21e9c9ce-3bbf-45f2-9c03-c8188c19cf08",
		"name": "HOMEWORK_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25537879"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2.check status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//check that the response body contains the correct string\r",
							"var correct_string = \"This is the first responce from server!ss\";\r",
							"pm.test(\"Response body contains the correct string: \" + correct_string, function () {\r",
							"    pm.expect(pm.response.text()).to.include(correct_string);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. check status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 4. check that response name matches request name (enter name manually)\r",
							"pm.test(\"Response name matches request name Gary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Gary\");\r",
							"});\r",
							"\r",
							"// 5. check that response age matches request age (enter age manually)\r",
							"pm.test(\"Response age matches request age 44\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"44\");\r",
							"});\r",
							"\r",
							"// 6. check that response salary matches request salary (enter salary manually)\r",
							"pm.test(\"Response salary matches request salary 1000\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 8. check that response name matches request name (get name from request)\r",
							"pm.test(\"Response name matches request name \" + request.data.name, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// 9. check that response age matches request age (get age from request)\r",
							"pm.test(\"Response age matches request age \" + request.data.age, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"\r",
							"// 10. check that response salary matches request salary (get salary from request)\r",
							"pm.test(\"Response salary matches request salary \" + request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(+request.data.salary);\r",
							"});\r",
							"\r",
							"//output family from response to console\r",
							"console.log(\"family: \", pm.response.json().family);\r",
							"\r",
							"//check that u_salary_1_5_year from response equals 4 * salary from request\r",
							"pm.test(\"u_salary_1_5_year from response equals 4 * salary from request \" + 4 * request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+4 * request.data.salary);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Gary",
							"type": "text"
						},
						{
							"key": "age",
							"value": "44",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. check status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 4. get object with Params from url of request\r",
							"var req_params = pm.request.url.query.toObject();\r",
							"// console.log(pm.request.url.query.get('name')); //another way\r",
							"\r",
							"// 5. check that response name matches request name (get name from request)\r",
							"pm.test(\"Response name matches request name \" + req_params.name, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(req_params.name);\r",
							"});\r",
							"\r",
							"// 6. check that response age matches request age (get age from request)\r",
							"pm.test(\"Response age matches request age \" + req_params.age, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(req_params.age);\r",
							"});\r",
							"\r",
							"// 7. check that response salary matches request salary (get salary from request)\r",
							"pm.test(\"Response salary matches request salary \" + req_params.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(+req_params.salary);\r",
							"});\r",
							"\r",
							"// 8. output family from response to console\r",
							"console.log(\"family: \", pm.response.json().family);\r",
							"\r",
							"// 9. check that dog from response has parameter name\r",
							"pm.test(\"Dog from response has parameter name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. check that dog from response has parameter age\r",
							"pm.test(\"Dog from response has parameter age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. check that the value of parameter name is Luky\r",
							"pm.test(\"Value of parameter name is Luky\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. check that value of parameter age is 4\r",
							"pm.test(\"Value of parameter age is 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Sarah&age=30&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sarah"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. check status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 4. get an object with Params from request URL\r",
							"var req_params = pm.request.url.query.toObject();\r",
							"// console.log(pm.request.url.query.get('name')); //another way\r",
							"\r",
							"// 5. check that response name matches request name (get name from request)\r",
							"pm.test(\"Response name matches request name \" + req_params.name, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(req_params.name);\r",
							"});\r",
							"\r",
							"// 6. check that response age matches request age (get age from request)\r",
							"pm.test(\"Response age matches request age = \" + req_params.age, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(+req_params.age);\r",
							"});\r",
							"\r",
							"// 7. output salary from request to console\r",
							"console.log(\"Salary from request is \", +req_params.salary);\r",
							"\r",
							"// 8. output salary from response to console\r",
							"console.log(\"Salary from response is \", pm.response.json().salary);\r",
							"\r",
							"// 9. output the 0th element of the salary array\r",
							"console.log(\"0th element of salary array is \", pm.response.json().salary[0]);\r",
							"\r",
							"// 10. output 1th element of salary array\r",
							"console.log(\"1th element of salary array is \", pm.response.json().salary[1]);\r",
							"\r",
							"// 11. output 2nd element of salary array\r",
							"console.log(\"2nd element of salary array is \", pm.response.json().salary[2]);\r",
							"\r",
							"// 12. check that 0th element of response salary matches request salary\r",
							"pm.test(\"0th element of response salary equals request salary = \" + req_params.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req_params.salary);\r",
							"});\r",
							"\r",
							"// 13. check that 1th element of response salary equales 2 * request salary\r",
							"pm.test(\"1th element of response salary equals 2 * request salary = \" + req_params.salary * 2, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req_params.salary * 2);\r",
							"});\r",
							"\r",
							"// 14. check that 2th element of response salary equales 3 * request salary\r",
							"pm.test(\"2th element of response salary equals 3 * request salary = \" + req_params.salary * 3, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req_params.salary * 3);\r",
							"});\r",
							"\r",
							"// 15. create a name variable in the environment\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"// 16. create a age variable in the environment\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"// 17. create a salary variable in the environment\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"// 18. pass the value of the variable name to the environment\r",
							"pm.environment.set(\"name\", req_params.name);\r",
							"\r",
							"// 19. pass the value of the variable age to the environment\r",
							"pm.environment.set(\"age\", req_params.age);\r",
							"\r",
							"// 20. pass the value of the variable salary to the environment\r",
							"pm.environment.set(\"salary\", req_params.salary);\r",
							"\r",
							"// 21. write a loop that outcomes the elements of the salary array in order to the console\r",
							"var jsonData = pm.response.json();\r",
							"for (var i = 0; i < jsonData.salary.length; i++ ) {\r",
							"    console.log(jsonData.salary[i]);\r",
							"}\r",
							"\r",
							"// 21. another option\r",
							"// var jsonData = pm.response.json();\r",
							"// for(item in jsonData.salary) {\r",
							"//     console.log(jsonData.salary[item]);\r",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Misha&age=22&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Misha"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. check status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 8. chech that response has a start_qa_salary parameter\r",
							"pm.test(\"Response json has a parameter \" + \"start_qa_salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. chech that response has a qa_salary_after_6_months parameter\r",
							"pm.test(\"Response json has a parameter \" + \"qa_salary_after_6_months\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. chech that response has a qa_salary_after_12_months parameter\r",
							"pm.test(\"Response json has a parameter \" + \"qa_salary_after_12_months\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. chech that response has a qa_salary_after_1.5_year parameter\r",
							"pm.test(\"Response json has a parameter \" + \"qa_salary_after_1.5_year\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. chech that response has a qa_salary_after_3.5_years parameter\r",
							"pm.test(\"Response json has a parameter \" + \"qa_salary_after_3.5_years\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. chech that response has a person parameter\r",
							"pm.test(\"Response json has a parameter \" + \"person\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. check that start_qa_salary from response equales request salary\r",
							"pm.test(\"start_qa_salary from response equales request salary = \" + request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+request.data.salary);\r",
							"});\r",
							"\r",
							"// 15. check that qa_salary_after_6_months from response equales request salary * 2\r",
							"pm.test(\"qa_salary_after_6_months from response equales request salary * 2 = \" + 2 * request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(2 * request.data.salary);\r",
							"});\r",
							"\r",
							"// 16. check that qa_salary_after_12_months from response equales request salary * 2.7\r",
							"pm.test(\"qa_salary_after_12_months from response equales request salary * 2.7 = \" + 2.7 * request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(2.7 * request.data.salary);\r",
							"});\r",
							"\r",
							"// 17. check that qa_salary_after_1.5_year from response equales request salary * 3.3\r",
							"pm.test(\"qa_salary_after_1.5_year from response equales request salary * 3.3 = \" + 3.3 * request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(3.3 * request.data.salary);\r",
							"});\r",
							"\r",
							"// 18. check that qa_salary_after_3.5_years from response equales request salary * 3.8\r",
							"pm.test(\"qa_salary_after_3.5_years from response equales request salary * 3.8 = \" + 3.8 * request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(3.8 * request.data.salary);\r",
							"});\r",
							"\r",
							"// 19. check that the 1th element of u_name from response equales salary from request\r",
							"pm.test(\"the 1th element of u_name from response equales salary from request = \" + request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+request.data.salary);\r",
							"});\r",
							"\r",
							"// 20. check that u_age from response equales age from request\r",
							"pm.test(\"u_age from response equales age from request = \" + request.data.age, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+request.data.age);\r",
							"});\r",
							"\r",
							"// 21. check that u_salary_5_years from response equales salary * 4.2 from request\r",
							"pm.test(\"u_salary_5_years from response equales age from request = \" + 4.2 * request.data.salary, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(4.2 * request.data.salary);\r",
							"});\r",
							"\r",
							"// 22. write a loop that outcomes the elements of the person list in order to the console\r",
							"var jsonData = pm.response.json();\r",
							"for (var property in jsonData.person) {\r",
							"    console.log(\"jsonData.person.\" + property + \" = \", jsonData.person[property]);\r",
							"}\r",
							"\r",
							"// 22a. write to the console a loop that outcomes the elements of the person list including nested ones\r",
							"// var jsonDataPerson = pm.response.json().person;\r",
							"// for (var property in jsonDataPerson) {\r",
							"//     console.log(\"jsonDataPerson \" + property + \" = \", jsonDataPerson[property]);\r",
							"//     if (typeof (jsonDataPerson[property]) == \"object\") {    \r",
							"//         for (var item in jsonDataPerson[property]) {\r",
							"//             console.log('inner_item = ', jsonDataPerson[property][item]);\r",
							"//         }\r",
							"//     }    \r",
							"// }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}